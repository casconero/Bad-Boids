///	param	$nodeName	-	the name of the node instance to display.

global proc string[] getRuleAttributes(string $typ){
	if($typ=="rule"){
		string $rules[4] = { "alignment", "cohesion", "separation", "follow" };
		return $rules;
	} else if($typ=="attr"){
		string $ruleAttributes[7] = { "Active", "Priority", "Factor", "Weight", "Radius", "Visibility", "AngleOfView" };
		return $ruleAttributes;
	}
}

global proc makeSimCmdButton( string $nodeName )
{
	string $nodeName = substring($nodeName,1,size($nodeName)-1);
	columnLayout -cat "both" 20 -adj true; // -adjustableColumn true;
		button -label "Launch Simulation" -h 32 -command ("launchSimCmd " + $nodeName) simLauncher;
	setParent ..;
}
global proc updateSimCmdButton( string $nodeName )
{
	string $nodeName = substring($nodeName,1,size($nodeName)-1);
    button -e -c ("launchSimCmd " + $nodeName) simLauncher; 
}

global proc int bbBrowseDir(string $path, string $fileType)
{
	textField -e -tx $path logFilePathField;
	return 1;
}
global proc makePathBrowser( string $attrName )
{
	print ("makePathBrowser called | attribute passed: " + $attrName + "\n");
	
	rowLayout -nc 3;
		text -l "Log File Path";
		textField logFilePathField;
		symbolButton -image "navButtonBrowse.xpm" browser;
	
    updatePathBrowser( $attrName );
}
global proc updatePathBrowser( string $attrName )
{
	string $buffer[], $nodeName;
	tokenize $attrName "." $buffer;
	$nodeName = $buffer[0];
	// print ("updatePathBrowser called | attribute passed: " + $attrName + "\n");
	
	string $attrValue = `getAttr $attrName`;
	if($attrValue==""){
		$attrValue = `workspace -q -fn`;
		$attrValue += ( "/" + `workspace -q -fn -fre "diskCache"`);
		setAttr -type "string" $attrName $attrValue;
	}
	textField -e -tx $attrValue logFilePathField;
	
	textField -e -cc ("setAttr -type \"string\" " + $attrName + " `textField -q -tx logFilePathField`;") logFilePathField;
	symbolButton -e -c ("string $logPathField = `textField -q -tx logFilePathField`;workspace -dir $logPathField;fileBrowser( \"bbBrowseDir\", \"Select Log Directory\", \"\", 4 ); setAttr -type \"string\" " + $attrName + " `textField -q -tx logFilePathField`;") browser;
	
	print ($buffer[0] + "\n");
	print `getAttr($buffer[0] + ".pathScriptjob")`;
	if(!`getAttr($buffer[0] + ".pathScriptjob")`){
		scriptJob -attributeChange $attrName ("updatePathBrowser " + $attrName);
		setAttr -l 1 ($buffer[0] + ".pathScriptjob") 1;
		// print ("scriptjob attached to " + $buffer[0] + " and now set to: " + `getAttr($buffer[0] + ".pathScriptjob")` + "\n");
	}
}

global proc leaderConnection( string $srcMenu, string $nodeName)
{
	print ($srcMenu + " : " + $nodeName + "\n");
	int $sel = `optionMenu -q -ni leaderSel`;
	if($sel){
		$srcMenu = `optionMenu -q -v $srcMenu`;
		connectAttr -f ($srcMenu + ".nodeState") ($nodeName + ".leaderMessage");
	}
}
global proc makeLeaderSel( string $nodeName )
{
	// string $nodeName = substring($nodeName,1,size($nodeName)-1);
	// print ("makeLeaderSel called | attribute passed: " + $nodeName + "\n");
	rowLayout -nc 2;
		text -l "Leader" leaderTxt;
		optionMenu -w 190 leaderSel; // -changeCommand "print 1"
		// button -l "Refresh Menu" -c ("updateLeaderSel " + $attrName) leaderSelRefresh;
    updateLeaderSel( $nodeName /* + "." */ );
}
global proc updateLeaderSel( string $nodeName )
{
	string $nodeName = substring($nodeName,1,size($nodeName)-1);
	print ("updateLeaderSel called | attribute passed: " + $nodeName + "\n");
	
	string $selected = "";
	if (`connectionInfo -isDestination ($nodeName + ".leaderMessage")`){
		$selected = `connectionInfo -sourceFromDestination ($nodeName + ".leaderMessage")`;
		string $buffer[]; 
		tokenize $selected "." $buffer;
		$selected = $buffer[0];
	}
	print ("leaderSel: " + $selected + "\n");
	
	string $menuFullPath = `optionMenu -q -fpn leaderSel`;
	
	int $count = 1;
	string $items[] = `optionMenu -q -ils leaderSel`;
	string $item;
	for($item in $items){
		// print ($item + "\n");
		deleteUI $item;
	}
	string $transforms[];
	string $locators[] = `ls -typ "locator"`;
	string $loc;
	if(size($locators)>0){
		int $sl;
		for ($loc in $locators){
			// print ($loc + "\n");
			$transforms = `listRelatives -p $loc`;
			$sl = ($transforms[0] == $selected)? $count : 1;
			menuItem -label $transforms[0] -p leaderSel;
			$count++;
		};
		text -e -en 1 leaderTxt;
		optionMenu -e -en 1 -sl $sl leaderSel;
		leaderConnection($menuFullPath,$nodeName);
	} else {
		text -e -en 0 leaderTxt;
		optionMenu -e -en 0 leaderSel;
	}
	
	optionMenu -e -cc ("leaderConnection " + $menuFullPath + " " + $nodeName) leaderSel;
	// button -e -c ("updateLeaderSel " + $attrName) leaderSelRefresh;
}

global proc dimAttributes( string $ruleAttr, string $rule, string $nodeName )
{
	if(($ruleAttr=="Active") || ($ruleAttr=="Visibility")){
		// print ( $nodeName + " - " + $ruleAttr + "\n");
		int $active = `getAttr ($nodeName + "." + $rule + "Active")`;
		int $visibility = `getAttr ($nodeName + "." + $rule + "Visibility")`;
		int $check;
		if($ruleAttr=="Active"){
			string $ruleAttributes[] = getRuleAttributes("attr");
			string $rAttr;
			for ($rAttr in $ruleAttributes){
				if($rAttr!="Active") editorTemplate -dimControl $nodeName ($rule + $rAttr) (1 - $active);
			}
			if($rule=="follow" && `optionMenu -q -ex leaderSel` ){
				int $check = `optionMenu -q -ni leaderSel`;
				text -e -en ($active && $check) leaderTxt;
				optionMenu -e -en ($active && $check) leaderSel;
			}
		}
		editorTemplate -dimControl $nodeName ( $rule + "AngleOfView" ) (1 - ($active && $visibility));
	}
}

global proc AEboidsBrainTemplate( string $nodeName )
{
	string $rules[] = getRuleAttributes("rule");
	string $ruleAttributes[] = getRuleAttributes("attr");
	string $rule;
	string $ruleAttr;
	
	editorTemplate -beginScrollLayout;

		editorTemplate -beginLayout "Simulation General Options" -collapse 0;
			editorTemplate -addControl "simulationLength";
			editorTemplate -addControl "framesPerSecond";
			editorTemplate -addControl "startFrame";
			editorTemplate -addSeparator;
			editorTemplate -addControl "boidsNumber";
			editorTemplate -addControl "particleSystem";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Boids Desires Options" -collapse 0;
			for ($rule in $rules){
				editorTemplate -beginLayout (capitalizeString($rule) + " Options") -collapse 1;
				for ($ruleAttr in $ruleAttributes){
					editorTemplate -l $ruleAttr -addControl ($rule + $ruleAttr) ("dimAttributes " + $ruleAttr + " " + $rule );
					if($ruleAttr=="Weight"){
						if($rule=="follow") editorTemplate -callCustom makeLeaderSel updateLeaderSel "";
						editorTemplate -addSeparator;
					}
				}
				editorTemplate -endLayout;
			}
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Boids Locomotion Options" -collapse 0;
			editorTemplate -addControl "locomotionMode";
			editorTemplate -addControl "maxSpeed";
			editorTemplate -addControl "maxForce";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Export Options" -collapse 0;
			editorTemplate -callCustom "makePathBrowser" "updatePathBrowser" "logFilePath"; //$nodeName;
			editorTemplate -addControl "logFileName";
			editorTemplate -addControl "logFileType";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Simulation" -collapse 0;
			editorTemplate -callCustom "makeSimCmdButton" "updateSimCmdButton" ""; //$nodeName;
		editorTemplate -endLayout;
		
		// add any extra attributes that have been added
		editorTemplate -addExtraControls;

	editorTemplate -endScrollLayout;
}
